{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","visibleGoods","goods","ALPHABET","sort","LENGTH","a","b","length","reverse","getReorderedGoods","className","type","onClick","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAwCE,IAAME,EAAM,WACjB,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAOMC,EAtCD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENE,EAAY,YAAOC,GAEzB,OAAQL,GACN,KAAKL,EAASI,KACZ,MAEF,KAAKJ,EAASW,SACZF,EAAaG,OACb,MAEF,KAAKZ,EAASa,OACZJ,EAAaG,MAAK,SAACE,EAAGC,GAAJ,OAAWD,EAAEE,OAASD,EAAEC,UAC1C,MAEF,QACE,OAAOP,EAGX,OAAKF,EAIEE,EAHEA,EAAaQ,UAeDC,CACnBjB,EACA,CAAEI,WAAUE,eAGd,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMf,EAAYN,EAASW,WACpCQ,UAAWG,IACT,SACA,UACA,CAAE,WAAYjB,IAAaL,EAASW,WANxC,iCAaA,wBACES,KAAK,SACLC,QAAS,kBAAMf,EAAYN,EAASa,SACpCM,UAAWG,IACT,SACA,aACA,CAAE,WAAYjB,IAAaL,EAASa,SANxC,4BAaA,wBACEO,KAAK,SACLC,QAAS,kBAAMb,GAAeD,IAC9BY,UAAWG,IACT,SACA,aACA,CAAE,YAA2B,IAAff,IANlB,sBAYEF,IAAaL,EAASI,OAASG,IAC/B,wBACEa,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAtDjBf,EAAYN,EAASI,WACrBI,GAAc,IAkDR,sBAUJ,6BACGC,EAAac,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC7HjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bbdcaf2d.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.NONE:\n      break;\n\n    case SortType.ALPHABET:\n      visibleGoods.sort();\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => (a.length - b.length));\n      break;\n\n    default:\n      return visibleGoods;\n  }\n\n  if (!isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(true);\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(true);\n  };\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.ALPHABET)}\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.LENGTH)}\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(!isReversed)}\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': isReversed === true },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || !isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => reset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}